---
import Button from "../../Button.astro";

const {
  h_type,
  h_class,
  bg_color,
  show_top_border,
  decoration_url,
  titles_size,
  title,
  title_en,
  introduction,
  introduction_en,
} = Astro.props.data;

const items: Array<any> = Astro.props.data["dropdowns-list"];

const TitleTag = h_type;
---

<section
  class:list={[
    "f-dropdowns-list",
    "f-layout",
    { "f-layout--has-border-top": show_top_border },
    `bg-${bg_color}`,
  ]}
>
  <div class="l-container">
    <div class="f-layout__header">
      <div class="f-layout__titles">
        {
          title && (
            <TitleTag
              class:list={[
                "f-layout__title",
                "f-dropdowns-list__title",
                "a-line-ttb",
                h_class,
              ]}
            >
              {title}
            </TitleTag>
          )
        }
      </div>

      {title_en && <div class="f-layout__title-en a-fade-in">{title_en}</div>}
    </div>

    {
      introduction && (
        <div class="f-layout__introductions">
          <div class="f-layout__introduction a-fade-in wysiwyg body-md">
            {introduction}
          </div>
          {introduction_en && (
            <div class="f-layout__introduction-en a-fade-in wysiwyg body-md">
              {introduction_en}
            </div>
          )}
        </div>
      )
    }
  </div>

  {
    items.length && (
      <div class="f-dropdowns-list__container">
        {items.map((item, idx) => (
          <div
            class:list={[
              "f-dropdowns-list__item",
              "a-translate-btt",
              { "js-open": idx === 0 },
            ]}
          >
            <div class="f-dropdowns-list__content">
              <div class="f-dropdowns-list__header">
                {item.title && (
                  <h3 class:list={["f-dropdowns-list__subTitle", titles_size]}>
                    {item.title}
                  </h3>
                )}

                <svg
                  width="19"
                  height="22"
                  class="f-dropdowns-list__arrow"
                  viewBox="0 0 19 22"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    d="M17.8232 10.0391L0.823242 1.03906L7.32324 10.0391L1.82324 21.5391L17.8232 10.0391Z"
                    fill="#474747"
                    stroke="#474747"
                  />
                </svg>
              </div>
              <div
                class:list={[
                  "f-dropdowns-list__inner",
                  { "js-open": idx == 0 },
                ]}
              >
                {item.text && (
                  <div class="f-dropdowns-list__text wysiwyg text-xl">
                    {item.text}
                  </div>
                )}
                {item.button && (
                  <div class="f-dropdowns-list__button">
                    <Button data={item.button} />
                  </div>
                )}
              </div>
              <figure class="f-dropdowns-list__figure" />
            </div>
          </div>
        ))}
      </div>
    )
  }
</section>

<style lang="scss">
  @use "../../../styles/base/variables" as *;
  @use "../../../styles/base/mixins" as *;

  .f-dropdowns-list {
    $root: &;
    position: relative;

    &__container {
      position: relative;
      z-index: 1;
      max-width: 700px;
      margin: 0 auto;
      display: flex;
      flex-direction: column;
    }

    &__inner {
      height: 0;
      overflow: hidden;
    }

    &__figure {
      width: 100%;
      opacity: 0;
      height: 0;
      margin: 0;
      overflow: hidden;
      transition: all 0.3s 0.5s;

      img {
        width: 100%;
        height: auto;
        border-radius: 10px;
      }
    }

    &__header {
      display: flex;
      position: relative;
      flex-wrap: wrap;
      padding: 0 20px 0 0;
    }

    &__arrow {
      position: absolute;
      right: 2px;
      top: 1px;
      transform: rotate(0deg);
      transition: transform 0.3s ease-out;
    }

    &__item {
      z-index: 1;
      position: relative;
      box-sizing: border-box;
      cursor: pointer;

      &.js-open {
        #{$root}__content {
          background-color: $red-dark;
          padding-bottom: 45px;
          margin: 23px 0 20px 0;
        }

        #{$root}__header {
          filter: blur(0);
          color: #fff;
        }

        #{$root}__arrow {
          transform: rotate(90deg);

          path {
            fill: #fff;
            stroke: #fff;
          }
        }

        #{$root}__figure {
          opacity: 1;
          height: auto;
          margin: 20px 0 0;
        }
      }
    }

    &__content {
      padding: 30px 17px;
      background-color: $gray;
      border-radius: 10px;
      margin: 23px 0 0 0;
      transition: background-color 0.3s;
    }

    &__text {
      margin: 18px 0 0 0;
    }

    &__button {
      display: inline-block;
      position: absolute;
      bottom: 0;
      transform: translateY(0%);
      opacity: 0;
      pointer-events: none;
      transition: 0.3s ease;

      .c-button {
        border-color: $white;
      }
    }

    &__item.js-open {
      #{$root}__button {
        opacity: 1;
        transition-delay: 0s;
        transform: translateY(10%);
        pointer-events: all;
      }

      #{$root}__text,
      #{$root}__text > * {
        color: $white;
      }

      #{$root}__figure {
        margin: 0;
      }
    }

    @include media-breakpoint-up(md) {
      &__container {
        margin: 40px auto 0;
      }

      &__item {
        margin-bottom: 40px;
      }
      &__item.js-open {
        #{$root}__button {
          transform: translateY(50%);
        }
      }

      &__content {
        margin: 0 !important;
        padding: 35px 35px 25px;
      }

      &__arrow {
        top: 10px;
      }

      &__text {
        max-width: 80%;

        ul {
          list-style-image: initial;
        }
      }
    }

    @include media-breakpoint-up(xl) {
      &__figure {
        display: block;
        position: absolute;
        z-index: -2;
        top: 50px;
        left: 95%;
        width: 50%;
        max-width: 350px;
        height: auto;
        object-fit: contain;
        margin: 0;
        padding: 0;
        overflow: hidden;
        // transform: translate(-80px, -20px);
        transform: translate2(-80px);
        opacity: 0;
        transition: transform 0.3s cubic-bezier(0.44, 0.78, 0, 1) 0.3s,
          opacity 0.3s ease-out 0.3s;

        &::before {
          content: "";
          display: block;
          padding-top: 66%;
        }

        img {
          position: absolute;
          top: 0;
          left: 0;
          width: 100%;
          height: 100%;
          object-fit: cover;
        }
      }

      &__item:nth-last-child(2) {
        z-index: 2;
      }

      &__item:last-child &__figure {
        bottom: 0;
        top: unset;
        z-index: -4;
      }
    }

    @include media-breakpoint-up(xxl) {
      &__figure {
        width: 70%;
        max-width: unset;
      }
    }
  }
</style>

<script>
  import gsap from "gsap";
  import ScrollTrigger from "gsap/ScrollTrigger";
  gsap.registerPlugin(ScrollTrigger);

  import {
    animatefromAutoToZero,
    animatefromZeroToAuto,
  } from "../../../lib/utils";

  import { gsapContentCards } from "../../../scripts/animations/text";

  initAccordions();
  animate();

  function initAccordions() {
    const dropdownslist = document.querySelectorAll(".f-dropdowns-list__item");

    if (!dropdownslist.length) return;

    dropdownslist.forEach((item) => {
      item.addEventListener("click", () => {
        if (
          document.querySelector(".f-dropdowns-list__item.js-open") &&
          document.querySelector(".f-dropdowns-list__item.js-open") !== item
        ) {
          animatefromAutoToZero(
            document.querySelector(
              ".f-dropdowns-list__item.js-open .f-dropdowns-list__inner"
            )
          );
          document
            .querySelector(".f-dropdowns-list__item.js-open")
            .classList.remove("js-open");
        }

        item.classList.toggle("js-open");

        item.classList.contains("js-open")
          ? animatefromZeroToAuto(
              item.querySelector(".f-dropdowns-list__inner")
            )
          : animatefromAutoToZero(
              item.querySelector(".f-dropdowns-list__inner")
            );
      });
    });
  }

  function animate() {
    const layoutClass = ".f-dropdowns-list";
    const layouts = document.querySelectorAll(layoutClass);

    if (!layouts) return;
    if (!document.querySelector(`.f-dropdowns-list`)) return;

    [...layouts].forEach((layout) => {
      let tl = gsap.timeline({
        scrollTrigger: {
          trigger: layout.querySelector(`${layoutClass} .l-container`),
          start: "top 90%",
          toggleActions: "play none play none",
          // markers: true
        },
      });
      let delay = 0; // initial delay value, incremented for each element

      if (layout.querySelector(`${layoutClass}__title `)) {
        tl.add(function () {
          layout
            .querySelector(`${layoutClass}__title`)
            .classList.add("is-inview");
        }, delay);
        delay += 0.15;
      }

      if (layout.querySelectorAll(`${layoutClass}__item`)) {
        let dropdownslistItems = layout.querySelectorAll(
          `${layoutClass}__item`
        );

        dropdownslistItems.forEach((dropdownslistItem) => {
          tl.add(function () {
            dropdownslistItem.classList.add("is-inview");
          }, delay);
          delay += 0.15;
        });
      }

      if (layout.querySelector(`${layoutClass}__container`)) {
        tl.from(
          layout.querySelectorAll(`${layoutClass}__container`),
          gsapContentCards,
          ">-=80%"
        );
      }
    });
  }
</script>
